/**
 * Statistics Page - Standalone non-authenticated stats viewer
 * @version 4.0
 */

import { notificationManager } from './modules/services/notifications.js';
import { faFullTimeService } from './modules/services/fa-fulltime.js';
import { seasonCharts } from './modules/ui/season-charts.js';
import { config } from './modules/shared/config.js';

class StatsPage {
    constructor() {
        this.currentView = 'overview';
        this.statistics = null;
        this.leagueTable = null;
        this.isInitialized = false;
    }

    async init() {
        if (this.isInitialized) return;

        try {
            // Load configuration first
            try {
                await config.load();
                console.log('Configuration loaded successfully');
            } catch (error) {
                console.warn('Configuration loading failed, using defaults:', error.message);
            }

            // Load statistics data
            await this._loadStatistics();

            // Bind event listeners
            this._bindEventListeners();

            // Render initial view
            await this._renderCurrentView();

            this.isInitialized = true;
            console.log('Stats page initialized successfully');

            // Show data source notification
            this._showDataSourceNotification();
        } catch (error) {
            console.error('Failed to initialize stats page:', error);
            this._renderError('Failed to initialize statistics page');
        }
    }

    async _loadStatistics() {
        try {
            // Try to load from Netlify function or fallback to demo data
            const response = await fetch('/.netlify/functions/public-stats');
            if (response.ok) {
                this.statistics = await response.json();
                this._updateDataSourceIndicator();
            } else {
                // Fallback to demo data
                this.statistics = this._getDemoStatistics();
                this._updateDataSourceIndicator();
            }
        } catch (error) {
            console.warn('Could not load live statistics, using demo data:', error);
            this.statistics = this._getDemoStatistics();
            this._updateDataSourceIndicator();
        }
    }

    _updateDataSourceIndicator() {
        const subtitle = document.getElementById('stats-subtitle');
        if (subtitle && this.statistics) {
            if (this.statistics.isLiveData) {
                const lastUpdated = new Date(this.statistics.lastUpdated).toLocaleDateString();
                subtitle.innerHTML = `
                    <i class="fas fa-check-circle text-success me-1"></i>
                    Live statistics - Last updated: ${lastUpdated}
                `;
                subtitle.className = 'text-success';
            } else {
                subtitle.innerHTML = `
                    <i class="fas fa-info-circle text-warning me-1"></i>
                    Demo data - No live statistics available
                `;
                subtitle.className = 'text-warning';
            }
        }
    }

    _showDataSourceNotification() {
        if (this.statistics) {
            if (this.statistics.isLiveData) {
                const lastUpdated = new Date(this.statistics.lastUpdated).toLocaleDateString();
                notificationManager.success(`Loaded live statistics generated on ${lastUpdated}`);
            } else {
                notificationManager.info('Showing demo data. Live statistics will appear here once generated by admin.');
            }
        }
    }

    _getDemoStatistics() {
        return {
            totalMatches: 12,
            totalGoals: 28,
            totalAssists: 15,
            playerStats: [
                { name: 'John Smith', goals: 8, assists: 3, appearances: 10, isRosterPlayer: true },
                { name: 'Mike Johnson', goals: 6, assists: 4, appearances: 12, isRosterPlayer: true },
                { name: 'David Wilson', goals: 5, assists: 2, appearances: 9, isRosterPlayer: true },
                { name: 'Chris Brown', goals: 4, assists: 3, appearances: 11, isRosterPlayer: true },
                { name: 'Tom Davis', goals: 3, assists: 2, appearances: 8, isRosterPlayer: true },
                { name: 'Alex Miller', goals: 2, assists: 1, appearances: 7, isRosterPlayer: true }
            ],
            teamStats: {
                totalMatches: 12,
                wins: 7,
                draws: 3,
                losses: 2,
                goalsFor: 28,
                goalsAgainst: 15,
                winPercentage: 58,
                avgGoalsFor: '2.3',
                avgGoalsAgainst: '1.3',
                avgAttendance: '18.5',
                avgAssists: '1.3'
            },
            matchStats: [
                { date: '2024-01-15', opposition: 'City United', ourGoals: 3, theirGoals: 1, attendance: 20 },
                { date: '2024-01-22', opposition: 'Rangers FC', ourGoals: 2, theirGoals: 2, attendance: 18 },
                { date: '2024-01-29', opposition: 'Athletic Club', ourGoals: 1, theirGoals: 0, attendance: 22 },
                { date: '2024-02-05', opposition: 'Town FC', ourGoals: 4, theirGoals: 2, attendance: 19 },
                { date: '2024-02-12', opposition: 'Rovers United', ourGoals: 2, theirGoals: 1, attendance: 17 }
            ]
        };
    }

    _bindEventListeners() {
        const container = document.getElementById('stats-content');
        if (!container) return;

        // Handle desktop navigation pill clicks
        document.addEventListener('click', (e) => {
            const button = e.target.closest('.stats-nav-pill');
            if (button) {
                e.preventDefault();
                e.stopPropagation();
                this._handleViewChange(button);
            }
        });

        // Handle mobile navigation
        this._bindMobileNavigation();

        // Handle window resize for responsive adjustments
        let resizeTimeout;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                this._handleResize();
            }, 250);
        });
    }

    _bindMobileNavigation() {
        const mobileToggle = document.getElementById('mobile-nav-toggle');
        const mobileSidebar = document.getElementById('mobile-nav-sidebar');
        const mobileOverlay = document.getElementById('mobile-nav-overlay');
        const mobileClose = document.getElementById('mobile-nav-close');

        // Debug: Check if elements exist
        console.log('Mobile nav elements:', {
            toggle: !!mobileToggle,
            sidebar: !!mobileSidebar,
            overlay: !!mobileOverlay,
            close: !!mobileClose
        });

        // Toggle mobile sidebar
        if (mobileToggle) {
            mobileToggle.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('Mobile toggle clicked');
                this._showMobileSidebar();
            });
        }

        // Close sidebar when clicking overlay
        if (mobileOverlay) {
            mobileOverlay.addEventListener('click', () => {
                this._hideMobileSidebar();
            });
        }

        // Close sidebar when clicking close button
        if (mobileClose) {
            mobileClose.addEventListener('click', () => {
                this._hideMobileSidebar();
            });
        }

        // Handle mobile navigation item clicks
        document.addEventListener('click', (e) => {
            const mobileNavItem = e.target.closest('.mobile-nav-item');
            if (mobileNavItem) {
                e.preventDefault();
                e.stopPropagation();
                this._handleViewChange(mobileNavItem);
                this._hideMobileSidebar();
            }
        });

        // Close sidebar on escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && mobileSidebar && mobileSidebar.classList.contains('show')) {
                this._hideMobileSidebar();
            }
        });
    }

    _showMobileSidebar() {
        const sidebar = document.getElementById('mobile-nav-sidebar');
        const toggle = document.getElementById('mobile-nav-toggle');

        console.log('Showing mobile sidebar:', !!sidebar);

        if (sidebar) {
            sidebar.classList.add('show');
            document.body.style.overflow = 'hidden';
            console.log('Sidebar classes:', sidebar.className);
        }

        if (toggle) {
            toggle.classList.add('active');
        }
    }

    _hideMobileSidebar() {
        const sidebar = document.getElementById('mobile-nav-sidebar');
        const toggle = document.getElementById('mobile-nav-toggle');

        if (sidebar) {
            sidebar.classList.remove('show');
            document.body.style.overflow = '';
        }

        if (toggle) {
            toggle.classList.remove('active');
        }
    }

    _handleViewChange(button) {
        const view = button.getAttribute('data-view');
        if (!view || view === this.currentView) return;

        // Update active states for both desktop and mobile
        const desktopButtons = document.querySelectorAll('.stats-nav-pill');
        const mobileButtons = document.querySelectorAll('.mobile-nav-item');

        desktopButtons.forEach(btn => btn.classList.remove('active'));
        mobileButtons.forEach(btn => btn.classList.remove('active'));

        // Set active state for current view
        const activeDesktop = document.querySelector(`.stats-nav-pill[data-view="${view}"]`);
        const activeMobile = document.querySelector(`.mobile-nav-item[data-view="${view}"]`);

        if (activeDesktop) activeDesktop.classList.add('active');
        if (activeMobile) activeMobile.classList.add('active');

        // Update mobile toggle label
        this._updateMobileToggleLabel(view);

        // Add loading state and change view
        const container = document.getElementById('stats-content');
        if (container) {
            container.style.opacity = '0.5';
            setTimeout(async () => {
                this.currentView = view;
                await this._renderCurrentView();
                container.style.opacity = '1';

                // Scroll to top of content
                container.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });

                // Initialize charts if charts view
                if (view === 'charts') {
                    setTimeout(() => {
                        seasonCharts.initializeCharts(this.statistics);
                    }, 200);
                }
            }, 150);
        }
    }

    _updateMobileToggleLabel(view) {
        const label = document.getElementById('current-view-label');
        if (!label) return;

        const viewLabels = {
            'overview': 'Overview',
            'players': 'Players',
            'teams': 'Team',
            'matches': 'Matches',
            'league': 'League Table',
            'charts': 'Charts'
        };

        label.textContent = viewLabels[view] || 'Overview';
    }

    _handleResize() {
        // Close mobile sidebar if screen becomes large
        if (window.innerWidth > 768) {
            this._hideMobileSidebar();
        }

        // Re-render charts if visible and screen size changed significantly
        if (this.currentView === 'charts' && this.statistics) {
            setTimeout(() => {
                seasonCharts.initializeCharts(this.statistics);
            }, 100);
        }
    }

    async _renderCurrentView() {
        const container = document.getElementById('stats-content');
        if (!container) return;

        let html = '';
        switch (this.currentView) {
            case 'overview':
                html = this._renderOverviewStats();
                break;
            case 'players':
                html = this._renderPlayerStats();
                break;
            case 'teams':
                html = this._renderTeamStats();
                break;
            case 'matches':
                html = this._renderMatchStats();
                break;
            case 'league':
                html = await this._renderLeagueTable();
                break;
            case 'charts':
                html = await this._renderChartsView();
                break;
        }

        container.innerHTML = html;
    }

    _renderOverviewStats() {
        if (!this.statistics) return this._renderNoDataMessage();

        const stats = this.statistics;
        const avgGoalsPerMatch = stats.totalMatches > 0 ? (stats.totalGoals / stats.totalMatches).toFixed(1) : '0.0';
        const avgAssistsPerMatch = stats.totalMatches > 0 ? (stats.totalAssists / stats.totalMatches).toFixed(1) : '0.0';

        return `
            <!-- Mobile-Optimized Summary Cards -->
            <div class="row g-2 mb-3">
                <div class="col-6 col-lg-3">
                    <div class="stats-card stats-card-primary">
                        <div class="stats-icon">
                            <i class="fas fa-futbol"></i>
                        </div>
                        <div class="stats-content">
                            <div class="stats-number">${stats.totalMatches}</div>
                            <div class="stats-label">Matches</div>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-lg-3">
                    <div class="stats-card stats-card-success">
                        <div class="stats-icon">
                            <i class="fas fa-bullseye"></i>
                        </div>
                        <div class="stats-content">
                            <div class="stats-number">${stats.totalGoals}</div>
                            <div class="stats-label">Goals</div>
                            <div class="stats-sub">${avgGoalsPerMatch}/match</div>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-lg-3">
                    <div class="stats-card stats-card-info">
                        <div class="stats-icon">
                            <i class="fas fa-hands-helping"></i>
                        </div>
                        <div class="stats-content">
                            <div class="stats-number">${stats.totalAssists}</div>
                            <div class="stats-label">Assists</div>
                            <div class="stats-sub">${avgAssistsPerMatch}/match</div>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-lg-3">
                    <div class="stats-card stats-card-warning">
                        <div class="stats-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <div class="stats-content">
                            <div class="stats-number">${stats.playerStats?.length || 0}</div>
                            <div class="stats-label">Players</div>
                            <div class="stats-sub">${stats.playerStats?.filter(p => p.goals > 0).length || 0} scorers</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Top Performers Section -->
            <div class="row g-2">
                <div class="col-6">
                    <div class="stats-section">
                        <div class="stats-section-header">
                            <i class="fas fa-trophy text-warning me-2"></i>
                            <span>Top Goal Scorers</span>
                        </div>
                        <div class="stats-section-body" style="height: calc(100vh - 480px); min-height: 250px; max-height: 400px; overflow-y: auto;">
                            ${this._renderTopScorers(stats.playerStats || [])}
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="stats-section">
                        <div class="stats-section-header">
                            <i class="fas fa-handshake text-info me-2"></i>
                            <span>Top Assist Providers</span>
                        </div>
                        <div class="stats-section-body" style="height: calc(100vh - 480px); min-height: 250px; max-height: 400px; overflow-y: auto;">
                            ${this._renderTopAssists(stats.playerStats || [])}
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    _renderPlayerStats() {
        if (!this.statistics) return this._renderNoDataMessage();

        const playerStats = this.statistics.playerStats;
        if (!playerStats || !Array.isArray(playerStats)) {
            return '<div class="stats-empty"><i class="fas fa-info-circle me-2"></i>No player statistics available</div>';
        }

        const totalGoals = playerStats.reduce((sum, p) => sum + p.goals, 0);
        const totalAssists = playerStats.reduce((sum, p) => sum + p.assists, 0);
        const avgGoalsPerPlayer = playerStats.length > 0 ? (totalGoals / playerStats.length).toFixed(1) : '0.0';
        const avgAssistsPerPlayer = playerStats.length > 0 ? (totalAssists / playerStats.length).toFixed(1) : '0.0';

        return `
            <div class="row g-2 mb-3">
                <div class="col-6 col-lg-3">
                    <div class="stats-card stats-card-primary">
                        <div class="stats-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <div class="stats-content">
                            <div class="stats-number">${playerStats.length}</div>
                            <div class="stats-label">Players</div>
                            <div class="stats-sub">${playerStats.filter(p => p.appearances > 0).length} active</div>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-lg-3">
                    <div class="stats-card stats-card-success">
                        <div class="stats-icon">
                            <i class="fas fa-futbol"></i>
                        </div>
                        <div class="stats-content">
                            <div class="stats-number">${playerStats.filter(p => p.goals > 0).length}</div>
                            <div class="stats-label">Scorers</div>
                            <div class="stats-sub">${avgGoalsPerPlayer} avg/player</div>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-lg-3">
                    <div class="stats-card stats-card-info">
                        <div class="stats-icon">
                            <i class="fas fa-hands-helping"></i>
                        </div>
                        <div class="stats-content">
                            <div class="stats-number">${playerStats.filter(p => p.assists > 0).length}</div>
                            <div class="stats-label">Assisters</div>
                            <div class="stats-sub">${avgAssistsPerPlayer} avg/player</div>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-lg-3">
                    <div class="stats-card stats-card-info">
                        <div class="stats-icon">
                            <i class="fas fa-plus-circle"></i>
                        </div>
                        <div class="stats-content">
                            <div class="stats-number">${totalGoals + totalAssists}</div>
                            <div class="stats-label">Contributions</div>
                            <div class="stats-sub">${(totalGoals + totalAssists) / playerStats.length > 0 ? ((totalGoals + totalAssists) / playerStats.length).toFixed(1) : '0.0'} per player</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row g-2">
                <div class="col-12">
                    <div class="stats-section">
                        <div class="stats-section-header">
                            <i class="fas fa-trophy text-warning me-2"></i>
                            <span>Player Performance Rankings (${playerStats.length})</span>
                        </div>
                        <div class="stats-section-body" style="max-height: 425px; overflow-y: auto; -webkit-overflow-scrolling: touch;">
                            ${this._renderPlayerRankings(playerStats)}
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    _renderTeamStats() {
        if (!this.statistics) return this._renderNoDataMessage();

        const stats = this.statistics;
        const teamStats = stats.teamStats || {};
        const matchStats = stats.matchStats || [];
        const opponents = [...new Set(matchStats.map(match => match.opposition))].filter(opp => opp && opp !== 'Unknown');
        const goalDifference = (teamStats.goalsFor || stats.totalGoals) - (teamStats.goalsAgainst || 0);

        return `
            <div class="row g-2 mb-3">
                <div class="col-6">
                    <div class="stats-card stats-card-primary">
                        <div class="stats-icon">
                            <i class="fas fa-futbol"></i>
                        </div>
                        <div class="stats-content">
                            <div class="stats-number">${teamStats.totalMatches || stats.totalMatches}</div>
                            <div class="stats-label">Matches</div>
                            <div class="stats-sub">${teamStats.winPercentage || '0'}% win rate</div>
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="stats-card ${goalDifference >= 0 ? 'stats-card-success' : 'stats-card-info'}">
                        <div class="stats-icon">
                            <i class="fas fa-bullseye"></i>
                        </div>
                        <div class="stats-content">
                            <div class="stats-number">${goalDifference >= 0 ? '+' : ''}${goalDifference}</div>
                            <div class="stats-label">Goal Diff</div>
                            <div class="stats-sub">${teamStats.goalsFor || stats.totalGoals} for, ${teamStats.goalsAgainst || 0} against</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row g-2 mb-3">
                <div class="col-4">
                    <div class="stats-card stats-card-success">
                        <div class="stats-icon">
                            <i class="fas fa-trophy"></i>
                        </div>
                        <div class="stats-content">
                            <div class="stats-number">${teamStats.wins || 0}</div>
                            <div class="stats-label">Wins</div>
                            <div class="stats-sub">${teamStats.avgGoalsFor || '0.0'} goals/game</div>
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <div class="stats-card stats-card-danger">
                        <div class="stats-icon">
                            <i class="fas fa-times-circle"></i>
                        </div>
                        <div class="stats-content">
                            <div class="stats-number">${teamStats.losses || 0}</div>
                            <div class="stats-label">Losses</div>
                            <div class="stats-sub">${teamStats.avgGoalsAgainst || '0.0'} goals/game</div>
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <div class="stats-card stats-card-warning">
                        <div class="stats-icon">
                            <i class="fas fa-handshake"></i>
                        </div>
                        <div class="stats-content">
                            <div class="stats-number">${teamStats.draws || 0}</div>
                            <div class="stats-label">Draws</div>
                            <div class="stats-sub">${teamStats.totalMatches ? ((teamStats.draws || 0) / teamStats.totalMatches * 100).toFixed(1) : '0.0'}% of matches</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row g-2">
                ${opponents.length > 0 ? `
                    <div class="col-12 col-md-6">
                        <div class="stats-section">
                            <div class="stats-section-header">
                                <i class="fas fa-users text-info me-2"></i>
                                <span>Opposition Teams (${opponents.length})</span>
                            </div>
                            <div class="stats-section-body" style="max-height: 150px; overflow-y: auto;">
                                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 0.25rem;">
                                    ${opponents.map(opponent => `
                                        <span class="text-wrap">${this._escapeHtml(opponent)}</span>
                                    `).join('')}
                                </div>
                            </div>
                        </div>
                    </div>
                ` : ''}
                <div class="col-12 ${opponents.length > 0 ? 'col-md-6' : ''}">
                    <div class="stats-section">
                        <div class="stats-section-header">
                            <i class="fas fa-chart-line text-primary me-2"></i>
                            <span>Performance Averages</span>
                        </div>
                        <div class="stats-section-body">
                            <div class="row g-2 text-center">
                                <div class="col-6">
                                    <div class="p-2">
                                        <div class="stat-value text-success">${teamStats.avgGoalsFor || '0.0'}</div>
                                        <div class="stat-label">Goals Scored</div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="p-2">
                                        <div class="stat-value text-danger">${teamStats.avgGoalsAgainst || '0.0'}</div>
                                        <div class="stat-label">Goals Conceded</div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="p-2">
                                        <div class="stat-value text-info">${teamStats.avgAttendance || '0.0'}</div>
                                        <div class="stat-label">Attendance</div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="p-2">
                                        <div class="stat-value text-warning">${teamStats.avgAssists || '0.0'}</div>
                                        <div class="stat-label">Assists</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    _renderMatchStats() {
        if (!this.statistics) return this._renderNoDataMessage();

        const stats = this.statistics;
        const matchStats = stats.matchStats || [];

        if (!matchStats || matchStats.length === 0) {
            return `
                <div class="stats-empty-state">
                    <div class="empty-state-icon">
                        <i class="fas fa-calendar-alt"></i>
                    </div>
                    <div class="empty-state-content">
                        <h4>No Match Data Available</h4>
                        <p>Individual match statistics are not available in the current data.</p>
                    </div>
                </div>
            `;
        }

        const avgAttendance = Math.round(matchStats.reduce((sum, m) => sum + (m.attendance || 0), 0) / matchStats.length) || 0;
        const wins = matchStats.filter(m => m.ourGoals > m.theirGoals).length;
        const draws = matchStats.filter(m => m.ourGoals === m.theirGoals).length;
        const losses = matchStats.filter(m => m.ourGoals < m.theirGoals).length;

        return `
            <div class="row g-2 mb-3">
                <div class="col-6 col-lg-3">
                    <div class="stats-card stats-card-primary">
                        <div class="stats-icon">
                            <i class="fas fa-futbol"></i>
                        </div>
                        <div class="stats-content">
                            <div class="stats-number">${matchStats.length}</div>
                            <div class="stats-label">Matches</div>
                            <div class="stats-sub">${wins}W ${draws}D ${losses}L</div>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-lg-3">
                    <div class="stats-card stats-card-success">
                        <div class="stats-icon">
                            <i class="fas fa-bullseye"></i>
                        </div>
                        <div class="stats-content">
                            <div class="stats-number">${stats.totalGoals}</div>
                            <div class="stats-label">Goals</div>
                            <div class="stats-sub">${(stats.totalGoals / matchStats.length).toFixed(1)}/match</div>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-lg-3">
                    <div class="stats-card stats-card-info">
                        <div class="stats-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <div class="stats-content">
                            <div class="stats-number">${avgAttendance}</div>
                            <div class="stats-label">Avg Attendance</div>
                            <div class="stats-sub">${matchStats.reduce((sum, m) => sum + (m.attendance || 0), 0)} total</div>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-lg-3">
                    <div class="stats-card stats-card-warning">
                        <div class="stats-icon">
                            <i class="fas fa-hands-helping"></i>
                        </div>
                        <div class="stats-content">
                            <div class="stats-number">${stats.totalAssists}</div>
                            <div class="stats-label">Assists</div>
                            <div class="stats-sub">${(stats.totalAssists / matchStats.length).toFixed(1)}/match</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row g-2">
                <div class="col-12">
                    <div class="stats-section">
                        <div class="stats-section-header">
                            <i class="fas fa-list text-primary me-2"></i>
                            <span>Match Results (${matchStats.length})</span>
                        </div>
                        <div class="stats-section-body" style="max-height: 400px; overflow-y: auto; -webkit-overflow-scrolling: touch;">
                            ${this._renderMatchCards(matchStats)}
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    async _renderLeagueTable() {
        try {
            // Get league table URL from config
            const leagueTableUrl = config.get('team.leagueTableUrl');

            if (!leagueTableUrl) {
                return `
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>League Table URL Not Configured</strong><br>
                        Please configure the league table URL in the team settings to view the league table.
                    </div>
                `;
            }

            if (!this.leagueTable) {
                // Show loading state
                setTimeout(async () => {
                    try {
                        this.leagueTable = await faFullTimeService.getLeagueTable(leagueTableUrl);
                        await this._renderCurrentView(); // Re-render with data
                    } catch (error) {
                        console.error('Failed to load league table:', error);
                        const container = document.getElementById('stats-content');
                        if (container) {
                            container.innerHTML = `
                                <div class="alert alert-warning">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    <strong>League Table Unavailable</strong><br>
                                    Could not load the league table at this time. Please try again later.
                                </div>
                            `;
                        }
                    }
                }, 100);

                return `
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary mb-3" role="status"></div>
                        <p class="text-muted">Loading league table...</p>
                    </div>
                `;
            }

            const teamName = config.get('team.defaultTeam1Name', 'Netherton');
            return faFullTimeService.renderLeagueTable(this.leagueTable, teamName);
        } catch (error) {
            return `
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Error:</strong> ${error.message}
                </div>
            `;
        }
    }

    async _renderChartsView() {
        if (!this.statistics) return this._renderNoDataMessage();

        const matchStats = this.statistics.matchStats || [];
        if (matchStats.length === 0) {
            return `
                <div class="stats-empty-state">
                    <div class="empty-state-icon">
                        <i class="fas fa-chart-line"></i>
                    </div>
                    <div class="empty-state-content">
                        <h4>No Chart Data Available</h4>
                        <p>Charts require match data to display trends and progression.</p>
                    </div>
                </div>
            `;
        }

        return `<div style="max-height: 70vh; overflow-y: auto; -webkit-overflow-scrolling: touch;">${await seasonCharts.renderChartsSection(this.statistics)}</div>`;
    }

    _renderTopScorers(playerStats) {
        const topScorers = [...playerStats]
            .filter(p => p.goals > 0)
            .sort((a, b) => b.goals - a.goals)
            .slice(0, 10);

        if (topScorers.length === 0) {
            return '<div class="text-muted text-center py-3">No goal scorers yet</div>';
        }

        return topScorers.map((player, index) => `
            <div class="player-stat-item">
                <div class="player-rank">${index + 1}</div>
                <div class="player-info">
                    <div class="player-name">${this._escapeHtml(player.name)}</div>
                    <div class="player-details">${player.appearances} appearances</div>
                </div>
                <div class="player-stat-value">${player.goals}</div>
            </div>
        `).join('');
    }

    _renderTopAssists(playerStats) {
        const topAssists = [...playerStats]
            .filter(p => p.assists > 0)
            .sort((a, b) => b.assists - a.assists)
            .slice(0, 10);

        if (topAssists.length === 0) {
            return '<div class="text-muted text-center py-3">No assists recorded yet</div>';
        }

        return topAssists.map((player, index) => `
            <div class="player-stat-item">
                <div class="player-rank">${index + 1}</div>
                <div class="player-info">
                    <div class="player-name">${this._escapeHtml(player.name)}</div>
                    <div class="player-details">${player.appearances} appearances</div>
                </div>
                <div class="player-stat-value">${player.assists}</div>
            </div>
        `).join('');
    }

    _renderPlayerRankings(playerStats) {
        const sortedPlayers = [...playerStats].sort((a, b) => {
            const aTotal = a.goals + a.assists;
            const bTotal = b.goals + b.assists;
            if (bTotal !== aTotal) return bTotal - aTotal;
            return b.goals - a.goals;
        });

        return `
            <div class="table-responsive">
                <table class="table table-sm table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th style="width: 40px;" class="small">Rank</th>
                            <th class="small">Player</th>
                            <th class="text-center small" style="width: 40px;">G</th>
                            <th class="text-center small" style="width: 40px;">A</th>
                            <th class="text-center small" style="width: 50px;">Total</th>
                            <th class="text-center small" style="width: 50px;">Apps</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${sortedPlayers.map((player, index) => `
                            <tr>
                                <td class="text-center small">${index + 1}</td>
                                <td class="small">${this._escapeHtml(player.name)}</td>
                                <td class="text-center small">${player.goals}</td>
                                <td class="text-center small">${player.assists}</td>
                                <td class="text-center small fw-bold">${player.goals + player.assists}</td>
                                <td class="text-center small text-muted">${player.appearances}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            </div>
        `;
    }

    _renderMatchCards(matchStats) {
        return matchStats.map(match => {
            const result = match.ourGoals > match.theirGoals ? 'W' :
                match.ourGoals < match.theirGoals ? 'L' : 'D';
            const resultClass = result === 'W' ? 'success' : result === 'L' ? 'danger' : 'warning';

            return `
                <div class="match-card mb-2">
                    <div class="match-card-header">
                        <div class="match-date">${new Date(match.date).toLocaleDateString('en-GB')}</div>
                        <div class="match-result">
                            <span class="badge bg-${resultClass}">${result}</span>
                        </div>
                    </div>
                    <div class="match-card-body">
                        <div class="match-teams">
                            <span class="team-name">Netherton</span>
                            <span class="match-score">${match.ourGoals} - ${match.theirGoals}</span>
                            <span class="team-name">${this._escapeHtml(match.opposition)}</span>
                        </div>
                        <div class="match-details">
                            <small class="text-muted">
                                <i class="fas fa-users me-1"></i>${match.attendance} attendance
                            </small>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }

    _renderNoDataMessage() {
        return `
            <div class="stats-empty-state">
                <div class="empty-state-icon">
                    <i class="fas fa-chart-bar"></i>
                </div>
                <div class="empty-state-content">
                    <h4>No Statistics Available</h4>
                    <p>Statistics will appear here once match data is available.</p>
                </div>
            </div>
        `;
    }

    _renderError(message) {
        const container = document.getElementById('stats-content');
        if (container) {
            container.innerHTML = `
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Error:</strong> ${message}
                </div>
            `;
        }
    }

    _escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// Initialize the stats page when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    const statsPage = new StatsPage();
    statsPage.init();
});